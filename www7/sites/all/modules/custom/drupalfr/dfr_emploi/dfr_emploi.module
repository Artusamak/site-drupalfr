<?php
/**
 * @file
 * Code for the dfr_emploi feature.
 */

include_once 'dfr_emploi.features.inc';

/**
 * Implements hook_entity_view_alter().
 */
function dfr_emploi_entity_view_alter(&$build, $type) {
  // Inject the publication date + expiration date for the offers.
  if ($type == 'node' && $build['#bundle'] == 'offre') {
    $output = '<strong>Publiée le :</strong> ' . format_date($build['#node']->created, 'custom', 'd/m/Y') . ' <em>(Valable : ' . $build['#node']->field_temps_publication[LANGUAGE_NONE][0]['value'] . ' mois)</em>';
    $build['created'] = array(
      '#weight' => -10,
      array('#markup' => $output),
    );
  }
}

/**
 * Implements hook_node_access().
 */
function dfr_emploi_node_access($node, $op, $account) {
  if ($op == 'update' && $node->type == 'offre' && $node->status) {
    if (!user_access('administer content', $account) && ($account->uid == $node->uid)) {
      drupal_set_message('Cette offre est publiée et ne peut plus être modifiée.');
      return NODE_ACCESS_DENY;
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_url_outbound_alter().
 */
function dfr_emploi_url_outbound_alter(&$path, &$options, $original_path) {
  if (variable_get('dfr_emploi_rewrite_urls', TRUE)) {
    global $base_url;

    // Osef des autres urls.
    if ($options['external']) {
      return;
    }

    // Ça, c'est un peu global redirect en soi.
    if ($alias = drupal_lookup_path('alias', $original_path)) {
      $path = $alias;
      // We already retrieved the alias, this will prevent another lookup.
      $options['alias'] = TRUE;
    }

    // On est sur emploi.*
    if (preg_match('|^(https?:\/\/)emploi\.(.+)|', $base_url, $matches)) {
      if (0 !== strpos($path, 'emploi/')) {
        // On veut que les paths normaux redirigent vers dfr.
        $options['absolute'] = TRUE;
        $options['base_url'] = $matches[1] . $matches[2];
      }
      else {
        // Et les autres soient tronqués d'"emploi".
        $path = substr($path, strlen('emploi/'));
      }
    }
    else {
      // Ça c'est pour que google retienne les bons liens.
      if (0 === strpos($path, 'emploi/')) {
        list($scheme, $url) = explode('://', $base_url, 2);
        // Verifions qu'on est pas dans un autre sous-domaine, genre emploi.
        if (substr_count($url, '.') == 2) {
          // Si oui on ne prend que les deux derniers éléments de base url.
          $url = substr($url, strpos($url, '.') + 1);
        }
        // On change de base et on passe en absolute.
        $options['absolute'] = TRUE;
        $options['base_url'] = $scheme . '://emploi.' . $url;
        // On tronque "emploi" et on change la base url.
        $path = substr($path, strlen('emploi/'));
      }
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function dfr_emploi_url_inbound_alter(&$path, $original_path, $path_language) {
  if (variable_get('dfr_emploi_rewrite_urls', TRUE)) {
    // Ne travailler que sur le chemin courant, pas sur les autres appels à ce
    // hook, also: don't mess with the form.
    if (current_path() !== $original_path || $_SERVER['REQUEST_METHOD'] == 'POST') {
      return;
    }

    global $base_url;
    // On arrive sur emploi.*
    if (preg_match('|^https?:\/\/emploi\.(.+)|', $base_url)) {
      // On veut que le path interne remette emploi en front, sauf s'il y est
      // déjà.
      if (0 !== strpos($original_path, 'emploi')) {
        if (!$original_path || $original_path == variable_get('site_frontpage', 'node')) {
          $path = 'emploi';
        }
        else {
          $path = 'emploi/' . $original_path;
        }
        if ($source = drupal_lookup_path('source', $path, $path_language)) {
          $path = $source;
        }
      }
    }
    elseif (0 === strpos($original_path, 'emploi') ||
      (($alias = drupal_lookup_path('alias', $path, $path_language)) &&
        0 === strpos($alias, 'emploi'))
    ) {
      // Quand on est pas sur emploi.*, on regarde si notre path interne ou son
      // alias commence par emploi, si oui, on tronque et on redirige sur
      // emploi.*
      if (!isset($alias)) {
        $alias = drupal_lookup_path('alias', $path, $path_language);
      }
      $alias = substr($alias, strlen('emploi/'));
      list($scheme, $url) = explode('://', $base_url, 2);
      $query = $_GET;
      if (isset($query['q'])) {
        unset($query['q']);
      }
      drupal_goto($alias, array('base_url' => $scheme . '://emploi.' . $url, 'query' => $query), 301);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function dfr_emploi_block_info() {
  $blocks['creer-offre'] = array(
    'info' => t("Lien création offre d'emploi"),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dfr_emploi_block_view($delta = '') {
  $block = array();

  $block['subject'] = '';
  $block['content'] = l(t('Déposer une offre'), 'node/add/offre', array(
    'attributes' => array('class' => 'btn-link'),
  ));
  if (user_is_anonymous()) {
    $block['content'] .= '<p><em>Vous devez être connecté pour pouvoir créer une offre.</em></p>';
  }
  return $block;
}

/**
 * Implements hook_cron().
 */
function dfr_emploi_cron() {
  // Unpublish expired offres.
  $results = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'offre')
    ->execute()
    ->fetchAllKeyed();
  $nodes = node_load_multiple(array_keys($results));
  foreach ($nodes as $node) {
    $lifetime = (int) $node->field_temps_publication['und'][0]['value'] * 30 * 24 * 3600;
    if (REQUEST_TIME > $node->changed + $lifetime) {
      $node->status = 0;
      node_save($node);
      watchdog('emploi', "Dépublication de l'offre %nid - %title", array('%nid' => $node->nid, '%title' => $node->title));
    }
  }
}

/**
 * Implements hook_action_info().
 */
function dfr_emploi_action_info() {
  return array(
    'dfr_emploi_reject_job_offer' => array(
      'type' => 'node',
      'label' => t('Reject and unpublish a job offer.'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'dfr_emploi_approve_job_offer' => array(
      'type' => 'node',
      'label' => t('Approve and publish a job offer.'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Unpublish and mark as rejected a job offer.
 *
 * @param $node
 *   Job offer object.
 * @param $context
 */
function dfr_emploi_reject_job_offer(&$node, $context) {
  $node->field_flag_moderation[LANGUAGE_NONE][0]['value'] = 'rejected';
  $node->status = 0;
}

/**
 * Publish and mark as approved a job offer.
 *
 * @param $node
 *   Job offer object.
 * @param $context
 */
function dfr_emploi_approve_job_offer(&$node, $context) {
  $node->field_flag_moderation[LANGUAGE_NONE][0]['value'] = 'approved';
  $node->status = 1;
}

/**
 * Implements hook_comment_view().
 *
 * Removes comments and comment links on job offer for non-moderator.
 */
function dfr_emploi_comment_view($comment, $view_mode, $langcode) {
  if ($comment->node_type == 'comment_node_offre' && !user_access('access job offer comments')) {
    $comment->content['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_view_alter().
 *
 * Hides comments and comment links on job offer for non-moderator.
 */
function dfr_emploi_node_view_alter(&$build) {
  if ($build['#bundle'] == 'offre' && !user_access('access job offer comments')) {
    // Hides comment links.
    if (isset($build['links']) && isset($build['links']['comment'])) {
      $build['links']['comment']['#access'] = FALSE;
    }

    // Hides comments.
    if (isset($build['comments'])) {
      $build['comments']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_permission().
 */
function dfr_emploi_permission() {
  return array(
    'access job offer comments' => array(
      'title' => t('Access job offer comments'),
      'description' => t('Display the comments on job offers for moderators.'),
    ),
  );
}
