<?php
/**
 * @file
 * Code for the dfr_emploi feature.
 */

include_once 'dfr_emploi.features.inc';

/**
 * Implements hook_node_access().
 */
function dfr_emploi_node_access($node, $op, $account) {
  if ($op == 'update' && $node->type == 'offre' && $node->status) {
    if (!user_access('administer content', $account) && ($account->uid == $node->uid)) {
      drupal_set_message('Cette offre est publiée et ne peut plus être modifiée.');
      return NODE_ACCESS_DENY;
    }
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_url_outbound_alter().
 */
function dfr_emploi_url_outbound_alter(&$path, &$options, $original_path) {
  if (variable_get('dfr_emploi_rewrite_urls', TRUE)) {
    global $base_url;
    // On est sur emploi.*
    if (preg_match('|^(https?:\/\/)emploi\.(.+)|', $base_url, $matches) && !$options['external']) {
      if ($alias = drupal_lookup_path('alias', $original_path)) {
        $path = $alias;
        // We already retrieved the alias, this will prevent another lookup
        $options['alias'] = TRUE;
      }
      if (0 !== strpos($path, 'emploi/')) {
        // On veut que les paths normaux redirigent vers dfr
        $options['absolute'] = TRUE;
        $options['base_url'] = $matches[1] . $matches[2];
      }
      else {
        // Et les autres soit tronqués d'"emploi"
        $path = substr($path, strlen('emploi/'));
      }
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function dfr_emploi_url_inbound_alter(&$path, $original_path, $path_language) {
  if (variable_get('dfr_emploi_rewrite_urls', TRUE)) {
    global $base_url;
    // On arrive sur emploi.*
    if (preg_match('|^https?:\/\/emploi\.(.+)|', $base_url)) {
      // On veut que le path interne remette emploi en front, sauf s'il y est déjà
      if (0 !== strpos($original_path, 'emploi')) {
        if (!$original_path || $original_path == variable_get('site_frontpage', 'node')) {
          $path = 'emploi';
        }
        else {
          $path = 'emploi/' . $original_path;
        }
        if ($source = drupal_lookup_path('source', $path, $path_language)) {
          $path = $source;
        }
      }
    }
    elseif (0 === strpos($original_path, 'emploi') ||
      (($alias = drupal_lookup_path('alias', $path, $path_language)) &&
        0 === strpos($alias, 'emploi'))
    ) {
      // Quand on est pas sur emploi.*, on regarde si notre path interne ou son
      // alias commence par emploi, si oui, on tronque et on redirige sur emploi.*
      if (!isset($alias)) {
        $alias = drupal_lookup_path('alias', $path, $path_language);
      }
      $alias = substr($alias, strlen('emploi/'));
      list($scheme, $url) = explode('://', $base_url, 2);
      drupal_goto($alias, array('base_url' => $scheme . '://emploi.' . $url), 301);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function dfr_emploi_block_info() {
  $blocks['creer-offre'] = array(
    'info' => t('Lien création offre d\'emploi'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dfr_emploi_block_view($delta = '') {
  $block = array();

  $block['subject'] = '';
  $block['content'] = l('Déposer une offre', 'node/add/offre', array(
    'attributes' => array('class' => 'btn-link'),
  ));
  $block['content'] .= '<p><em>Vous devez être connecté pour pouvoir créer une offre.</em></p>';
  return $block;
}

/**
 * Implements hook_cron().
 */
function dfr_emploi_cron() {
  // Unpublish expired offres
  $results = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('status', 1)
    ->condition('type', 'offre')
    ->execute()
    ->fetchAllKeyed();
  $nodes = node_load_multiple(array_keys($results));
  foreach ($nodes as $node) {
    $lifetime = (int)$node->field_temps_publication['und'][0]['value'] * 30 * 24 * 3600;
    if(REQUEST_TIME > $node->changed + $lifetime) {
      $node->status = 0;
      node_save($node);
    }
  }
}
