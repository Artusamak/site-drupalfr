<?php

/**
 * Implements hook_menu().
 */
function drupalfr_events_menu() {
  return array(
    'prochains-evenements' => array(
      'title' => 'Les prochains événements et meetups en France',
      'page callback' => 'drupalfr_events_upcoming_events',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function drupalfr_events_theme() {
  return array(
    'dfr_events_listing' => array(
      'variables' => array(
        'display_mode' => NULL,
        'events' => array(),
      ),
      'template' => 'drupalfr-events-listing',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function drupalfr_events_block_info() {
  return array(
    'next_events' => array(
      'info' => t('Prochains évènements Meetup'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalfr_events_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'next_events':
      $events = drupalfr_events_fetch_events(6);
      $map = leaflet_map_get_info('OSM Mapnik');
      $features = drupalfr_events_prepare_leaflet_features($events);

      $block = array(
        'subject' => t('Les 6 prochains événements'),
        'content' => array(
          'map' => leaflet_build_map($map, $features, '300px'),
          'events' => drupalfr_events_display_events($events, 'teaser'),
          'link' => array(
            '#markup' => l(t('Programme détaillé'), 'prochains-evenements', array(
              'attributes' => array(
                'class' => array(
                  'more-link',
                ),
              ))
            ),
          ),
        ),
      );
      $block['content']['map']['#attributes']['class'] = array('event-listing-map-teaser');
      break;
  }
  return $block;
}

/**
 * Displays the upcoming events.
 *
 * @param array $events
 *   Array of events coming from the raw answer of meetup.com API response.
 * @param string $display_mode
 *   Display mode to choose the render format. Can be either teaser of full.
 *
 * @return array
 *   Returns a renderable array.
 */
function drupalfr_events_display_events($events, $display_mode = 'teaser') {
  $content = array();
  if ($events) {
    $content['#theme'] = 'dfr_events_listing';
    $content['#display_mode'] = $display_mode;
    $content['#events'] = $events;
  }
  else {
    $content['#markup'] = "<p>Aucun évènement n'est prévu pour le moment.</p>";
  }
  return $content;
}

/**
 * Fetch the upcoming events from Meetup.com API.
 *
 * @param mixed $items
 *   Number of items to extract from the feed. If not provided, all the meetups
 *   will be fetched.
 *
 * @return array
 *   Returns the raw array of the upcoming events extracted from
 *   meetup.com API response.
 */
function drupalfr_events_fetch_events($items = FALSE) {
  $query_url = 'https://api.meetup.com/2/events?key=4051646f3d23a6114243d5834497d&sign=true&status=upcoming&group_urlname=drupal-france-francophonie';
  if ($items) {
    $query_url .= '&page=' . $items;
  }
  $response = drupal_http_request($query_url);
  if ($response->code == 200) {
    // Extract the response data.
    $data = drupal_json_decode($response->data);
    if (count($data['results']) > 0) {
      // Calculate the number of inscriptions.
      foreach ($data['results'] as $key => $meetup) {
        $data['results'][$key]['drupalfr_inscription_count'] = $data['results'][$key]['yes_rsvp_count'] + $data['results'][$key]['waitlist_count'];
      }
      return $data['results'];
    }
    else {
      return array();
    }
  }
  else {
    $response_data = drupal_json_decode($response->data);
    if (
      isset($response_data['errors']) &&
      isset($response_data['errors'][0]) &&
      isset($response_data['errors'][0]['message'])) {
      watchdog('events_meetup', 'Error parsing the meetup feed. @response', array('@response' => $response_data['errors'][0]['message']));
    }
    else {
      watchdog('events_meetup', 'Error parsing the meetup feed. @response', array('@response' => $response->status_message));
    }
    return array();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Exposes the display mode as an extra class.
 */
function drupalfr_events_preprocess_dfr_events_listing($variables) {
  $variables['classes'] = implode(' ', array('drupalfr-events-list', $variables['display_mode']));
}


/**
 * Page callback for prochains-evenements.
 */
function drupalfr_events_upcoming_events() {
  if ($content = cache_get('upcoming-events-full')) {
    return $content->data;
  }
  else {
    $map = leaflet_map_get_info('OSM Mapnik');
    $events = drupalfr_events_fetch_events();
    $features = drupalfr_events_prepare_leaflet_features($events);

    // Keep only 5 meetups for the list.
    $list_events = array_slice($events, 0, 5);

    $content['map'] = leaflet_build_map($map, $features, '600px');
    $content['map']['#attributes']['class'] = array('event-listing-map');
    $content['events'] = drupalfr_events_display_events($list_events, 'full');
    $content['infos'] = array(
      '#markup' => '<p>' . l(t('Voir tous les évènements'), 'http://www.meetup.com/drupal-france-francophonie') . '</p>',
    );
    cache_set('upcoming-events-full', $content, 'cache', 3600);
    return $content;
  }
}

/**
 * Helper function.
 *
 * Prepare leaflet features from meetups events.
 *
 * @param array $events
 *   An array of events from meetup as retrieved with
 *   drupalfr_events_fetch_events().
 *
 * @return array
 *   An array of leaflet features to give to leaflet_render_map().
 */
function drupalfr_events_prepare_leaflet_features($events) {
  $features = array();

  // Prepare city name extraction.
  $main_cities = drupalfr_events_get_main_cities();
  $main_cities_names = array_keys($main_cities);
  $regex = '/(' . implode('|', $main_cities_names) . ')/i';

  foreach ($events as $event) {
    if (isset($event['venue'])) {
      $popup_content = '[' . $event['venue']['city'] . '] - ' . $event['name'];
      $features[] = array(
        'type' => 'point',
        'lat' => $event['venue']['lat'],
        'lon' => $event['venue']['lon'],
        'popup' => l($popup_content, $event['event_url'], array('absolute' => TRUE)),
      );
    }
    else {
      // Extract coordinates from city name.
      preg_match($regex, $event['name'], $event_city);

      if (!empty($event_city)) {
        $event_city = array_shift($event_city);
        $event_city_lowered = drupal_strtolower($event_city);

        $popup_content = '[' . $event_city . '] - ' . $event['name'];
        $features[] = array(
          'type' => 'point',
          'lat' => $main_cities[$event_city_lowered]['lat'],
          'lon' => $main_cities[$event_city_lowered]['lon'],
          'popup' => l($popup_content, $event['event_url'], array('absolute' => TRUE)) . ' : ' . t("Ce meetup n'a pas encore de lieu précisément défini."),
        );
      }
    }
  }

  return $features;
}

/**
 * Helper function.
 *
 * Coordinates from http://www.coordonnees-gps.fr
 *
 * @return array
 *   An array containing the coordinates of the main french cities.
 */
function drupalfr_events_get_main_cities() {
  return array(
    'bordeaux' => array(
      'lat' => '44.837789',
      'lon' => '-0.57918',
    ),
    'lille' => array(
      'lat' => '50.62925',
      'lon' => '3.057256',
    ),
    'lyon' => array(
      'lat' => '45.764043',
      'lon' => '4.835659',
    ),
    'marseille' => array(
      'lat' => '43.296482',
      'lon' => '5.36978',
    ),
    'montpellier' => array(
      'lat' => '43.610769',
      'lon' => '3.876716',
    ),
    'nantes' => array(
      'lat' => '47.218371',
      'lon' => '-1.553621',
    ),
    'paris' => array(
      'lat' => '48.856614',
      'lon' => '2.352222',
    ),
    'toulouse' => array(
      'lat' => '43.604652',
      'lon' => '1.444209',
    ),
  );
}

/**
 * Implements hook_date_format_types().
 */
function drupalfr_events_date_format_types() {
  return array(
    'medium_with_at' => t('Medium with at'),
  );
}

/**
 * Implements hook_date_formats().
 */
function drupalfr_events_date_formats() {
  $formats = array();
  $formats[] = array(
    'type'    => 'medium_with_at',
    'format'  => 'd F Y \a\t H\hi',
    'locales' => array('en'),
  );
  $formats[] = array(
    'type'    => 'medium_with_at',
    'format'  => 'd F Y \à H\hi',
    'locales' => array('fr'),
  );
  return $formats;
}
