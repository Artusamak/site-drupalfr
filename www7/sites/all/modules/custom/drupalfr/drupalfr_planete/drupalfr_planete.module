<?php
/**
 * @file
 * Code for the Drupal FR planete feature.
 */

include_once('drupalfr_planete.features.inc');

/**
 * Implements hook_entity_info_alter().
 *
 * Adds some view modes for the planet display user entity type.
 */
function drupalfr_planete_entity_info_alter(&$entity_info) {
  $entity_info['user']['view modes']['planete_author'] = array(
    'label' => t("Planete author block"),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_block_info().
 */
function drupalfr_planete_block_info() {
  return array(
    'author' => array(
      'info' => t("Planet node author"),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalfr_planete_block_view($delta = '') {
  switch ($delta) {

    case 'author':
      if (!($node = menu_get_object()) ||
          'planete' !== $node->type ||
          !isset($node->field_planete_user) ||
          empty($node->field_planete_user) ||
          !($uid = $node->field_planete_user[LANGUAGE_NONE][0]['uid']) ||
          !($account = user_load($uid)))
      {
        return;
      }

      return array('content' => user_view($account, 'planete_author'));
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
function dfr_emploi_url_outbound_alter(&$path, &$options, $original_path) {
  if (variable_get('dfr_emploi_rewrite_urls', FALSE)) {
    global $base_url;
    // On est sur emploi.*
    if (preg_match('|^(https?:\/\/)emploi\.(.+)|', $base_url, $matches) && !$options['external']) {
      if ($alias = drupal_lookup_path('alias', $original_path)) {
        $path = $alias;
        // We already retrieved the alias, this will prevent another lookup
        $options['alias'] = TRUE;
      }
      if (0 !== strpos($path, 'emploi/')) {
        // On veut que les paths normaux redirigent vers dfr
        $options['absolute'] = TRUE;
        $options['base_url'] = $matches[1] . $matches[2];
      }
      else {
        // Et les autres soit tronqués d'"emploi"
        $path = substr($path, strlen('emploi/'));
      }
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 *
function dfr_emploi_url_inbound_alter(&$path, $original_path, $path_language) {
  if (variable_get('dfr_emploi_rewrite_urls', FALSE)) {
    global $base_url;
    // On arrive sur emploi.*
    if (preg_match('|^https?:\/\/emploi\.(.+)|', $base_url)) {
      // On veut que le path interne remette emploi en front, sauf s'il y est déjà
      if (0 !== strpos($original_path, 'emploi')) {
        if (!$original_path || $original_path == variable_get('site_frontpage', 'node')) {
          $path = 'emploi/tous';
        }
        else {
          $path = 'emploi/' . $original_path;
        }
        if ($source = drupal_lookup_path('source', $path, $path_language)) {
          $path = $source;
        }
      }
    }
    elseif (0 === strpos($original_path, 'emploi') ||
        (($alias = drupal_lookup_path('alias', $path, $path_language)) &&
            0 === strpos($alias, 'emploi'))
    ) {
      // Quand on est pas sur emploi.*, on regarde si notre path interne ou son
      // alias commence par emploi, si oui, on tronque et on redirige sur emploi.*
      if (!isset($alias)) {
        $alias = drupal_lookup_path('alias', $path, $path_language);
      }
      $alias = substr($alias, strlen('emploi/'));
      list($scheme, $url) = explode('://', $base_url, 2);
      drupal_goto($alias, array('base_url' => $scheme . '://emploi.' . $url), 301);
    }
  }
}
 */

/**
 * Implements hook_url_inbound_alter().
 */
function drupalfr_planete_url_inbound_alter(&$path, $original_path, $path_language) {

  global $base_url;

  list($scheme, $url) = explode('://', $base_url, 2);

  if (0 === strpos($url, 'planete.')) {
    if ('planete' === $path) {
      // Quand l'utilisateur est sur l'URL en planete.URL, on doit s'assurer
      // que les chemins / et /planete ne soit pas dupliqués, on rediregera
      // donc sur /.
      drupal_goto($base_url, array(), 301);
    }
    else if (empty($path) || $path === variable_get('site_frontpage', 'node')) {
      // Chemin vide ou front page, on est bon, on doit alors changer le chemin
      // interne à Drupal pour le feinter et lui faire croire qu'on est dans
      // la page /planete.
      $path = 'planete';
    }
    else {
      // Tout autre tentative doit retourner sur le site principal.
      drupal_goto($scheme . '://' . substr($url, strlen('planete.')), array(), 301);
    }
  }
  else if ('planete' === $path) {
    drupal_goto($scheme . '://planete.' . $url, array(), 301);
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function drupalfr_planete_url_outbound_alter(&$path, &$options, $original_path) {

  global $base_url;

  if ($options['external']) {
    return;
  }

  list($scheme, $url) = explode('://', $base_url, 2);

  if (preg_match('@^node/(\d+)$@', $path, $matches) &&
      ($node = node_load($matches[1])) &&
      'planete' === $node->type &&
      isset($node->field_planete_url) &&
      !empty($node->field_planete_url) &&
      isset($node->field_planete_url[LANGUAGE_NONE][0]['url']))
  {
    $path                = $node->field_planete_url[LANGUAGE_NONE][0]['url'];
    $options['absolute'] = TRUE;
    $options['external'] = TRUE;
  }
  // Dans le cas du outbound, la seule URL valable pour accéder au planete
  // est /planete, cas dans leque on va gentillement réécrire la requête,
  // tout autre path sera renvoyé vers le site d'origine.
  else if ('planete' === $path) {
    if (0 === strpos($url, 'planete.')) {
      $path                = $scheme . '://' . $url;
      $options['absolute'] = TRUE;
      $options['external'] = TRUE;
    } else {
      $path                = $scheme . '://planete.' . $url;
      $options['absolute'] = TRUE;
      $options['external'] = TRUE;
    }
  }
  else if (0 === strpos($url, 'planete.')) {
    $path                = $scheme . '://' . substr($url, strlen('planete.')) . '/' . $path;
    $options['absolute'] = TRUE;
    $options['external'] = TRUE;
  }
}

/**
 * Ensures that the feed exist.
 */
function _drupalfr_planete_user_save($account) {
  // Avoid some PHP warnings if site is broken.
  if (isset($account->field_planete_rss) &&
      !empty($account->field_planete_rss) &&
      // For the first time in my life I have the pleasure to see the field
      // API leaving an empty value in there, so I have to do deeper checks
      // than usual to ensure we have no URL.
      isset($account->field_planete_rss[LANGUAGE_NONE][0]['url']))
  {
    $feed_url = $account->field_planete_rss[LANGUAGE_NONE][0]['url'];

    $nid = db_select('node', 'n')
       ->fields('n', array('nid'))
       ->condition('n.type', 'planete_feed_source')
       ->condition('n.uid', $account->uid)
       ->range(0, 1)
       ->execute()
       ->fetchField();

    if ($nid) {
      // Node might be updated from here.
      $node = node_load($nid);

      if ($feed_url !== $node->feeds['FeedsHTTPFetcher']['source']) {
        // URL changed, update the node.
        $node->feeds = array(
          'FeedsHTTPFetcher' => array(
            'source' => $feed_url,
          ),
        );
        node_save($node);
      }
    } else {
      // Create new node.
      $node = new stdClass;
      $node->title = "Planète pour l'utilisateur " . $account->uid;
      $node->type = 'planete_feed_source';
      $node->feeds = array(
        'FeedsHTTPFetcher' => array(
          'source' => $feed_url,
        ),
      );
      $node->status = 1;
      $node->uid = $account->uid;
      node_save($node);
    }
  } else {
    // No feed set or has been removed.
    $nid_list = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'planete_feed_source')
      ->condition('n.uid', $account->uid)
      ->execute()
      // Doing a fetchCol() and no LIMIT clause will ensure that in case
      // a bug happened and user more than one feed source, we delete them
      // all.
      ->fetchCol();

    node_delete_multiple($nid_list);
  }
}

/**
 * Implements hook_user_insert().
 */
function drupalfr_planete_user_insert($edit, $account) {
  _drupalfr_planete_user_save($account);
}

/**
 * Implements hook_user_update().
 */
function drupalfr_planete_user_update($edit, $account) {
  _drupalfr_planete_user_save($account);
}

/**
 * Implements hook_feeds_presave().
 *
 * Ensures that newly create feed items will inherit from the original user
 * reference so we can tune display easily later.
 */
function drupalfr_planete_feeds_presave(FeedsSource $source, $entity, $item) {
  // It seems that Feeds is almost entity ready (meaning they don't need
  // to be necessarily nodes) but UI can still work only with nodes. Checking
  // for the 'type' property ensures we have a node, no PHP warnings in case
  // some other modules messes up with Feeds, and that we are doing stuff with
  // our own data.
  // 'feeds_nid' is not part of the public API, but the FeedsConfigurable class
  // from which FeedsSource inherits actually implement the __get magic method
  // and will return us this property.
  if (isset($entity->type) && 'planete' === $entity->type && ($node = node_load($source->feed_nid))) {
    $entity->field_planete_user = array(LANGUAGE_NONE => array(0 => array('uid' => $node->uid)));
    $entity->uid = $node->uid;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Rewrite the node URL to be the original post one, if possible.
 */
function drupalfr_planete_preprocess_node(&$variables) {
  $node = $variables['node'];

  if (isset($node->field_planete_url) &&
      !empty($node->field_planete_url) &&
      isset($node->field_planete_url[LANGUAGE_NONE][0]['url']))
  {
    $variables['node_url'] = $node->field_planete_url[LANGUAGE_NONE][0]['url'];
  }
}
